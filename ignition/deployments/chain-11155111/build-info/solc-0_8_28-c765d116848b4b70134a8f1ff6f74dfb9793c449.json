{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-c765d116848b4b70134a8f1ff6f74dfb9793c449",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/StakingSystem.sol": "project/contracts/StakingSystem.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "cancun",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": [
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/"
      ],
      "viaIR": true
    },
    "sources": {
      "npm/@openzeppelin/contracts@5.4.0/access/Ownable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/interfaces/IERC1363.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC1363.sol)\n\npragma solidity >=0.6.2;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @title IERC1363\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\n *\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\n */\ninterface IERC1363 is IERC20, IERC165 {\n    /*\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\n     * 0xb0202a11 ===\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\n     */\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @param data Additional data with no specified format, sent in call to `spender`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/interfaces/IERC165.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC165.sol)\n\npragma solidity >=0.4.16;\n\nimport {IERC165} from \"../utils/introspection/IERC165.sol\";\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/interfaces/IERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC20.sol)\n\npragma solidity >=0.4.16;\n\nimport {IERC20} from \"../token/ERC20/IERC20.sol\";\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/token/ERC20/IERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/token/ERC20/utils/SafeERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC1363} from \"../../../interfaces/IERC1363.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    /**\n     * @dev An operation with an ERC-20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     *\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\n     * only sets the \"standard\" allowance. Any temporary allowance will remain active, in addition to the value being\n     * set here.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            safeTransfer(token, to, value);\n        } else if (!token.transferAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferFromAndCallRelaxed(\n        IERC1363 token,\n        address from,\n        address to,\n        uint256 value,\n        bytes memory data\n    ) internal {\n        if (to.code.length == 0) {\n            safeTransferFrom(token, from, to, value);\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\n     * once without retrying, and relies on the returned value to be true.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            forceApprove(token, to, value);\n        } else if (!token.approveAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            // bubble errors\n            if iszero(success) {\n                let ptr := mload(0x40)\n                returndatacopy(ptr, 0, returndatasize())\n                revert(ptr, returndatasize())\n            }\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        bool success;\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/Context.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/introspection/IERC165.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/Pausable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/Pausable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    bool private _paused;\n\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    /**\n     * @dev The operation failed because the contract is paused.\n     */\n    error EnforcedPause();\n\n    /**\n     * @dev The operation failed because the contract is not paused.\n     */\n    error ExpectedPause();\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        if (paused()) {\n            revert EnforcedPause();\n        }\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        if (!paused()) {\n            revert ExpectedPause();\n        }\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/ReentrancyGuard.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
      },
      "project/contracts/StakingSystem.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/utils/Pausable.sol\";\n\n// Uniswap V3 interfaces\ninterface ISwapRouter {\n    struct ExactInputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n        uint160 sqrtPriceLimitX96;\n    }\n    \n    function exactInputSingle(ExactInputSingleParams calldata params)\n        external payable returns (uint256 amountOut);\n}\n\ninterface IQuoter {\n    function quoteExactInputSingle(\n        address tokenIn,\n        address tokenOut,\n        uint24 fee,\n        uint256 amountIn,\n        uint160 sqrtPriceLimitX96\n    ) external returns (uint256 amountOut);\n}\n\n// AAVE V3 interfaces with aToken support\ninterface IPool {\n    function supply(\n        address asset,\n        uint256 amount,\n        address onBehalfOf,\n        uint16 referralCode\n    ) external;\n    \n    function withdraw(\n        address asset,\n        uint256 amount,\n        address to\n    ) external returns (uint256);\n    \n    function getUserAccountData(address user)\n        external view returns (\n            uint256 totalCollateralBase,\n            uint256 totalDebtBase,\n            uint256 availableBorrowsBase,\n            uint256 currentLiquidationThreshold,\n            uint256 ltv,\n            uint256 healthFactor\n        );\n}\n\ninterface IPoolAddressesProvider {\n    function getPool() external view returns (address);\n}\n\n// AAVE aToken interface for precise yield calculations\ninterface IAToken is IERC20 {\n    function getScaledBalanceOf(address user) external view returns (uint256);\n    function scaledTotalSupply() external view returns (uint256);\n    function getIncentivesController() external view returns (address);\n    function UNDERLYING_ASSET_ADDRESS() external view returns (address);\n}\n\n// AAVE Pool Data Provider for getting aToken addresses\ninterface IPoolDataProvider {\n    function getReserveTokensAddresses(address asset)\n        external view returns (\n            address aTokenAddress,\n            address stableDebtTokenAddress,\n            address variableDebtTokenAddress\n        );\n    \n    function getReserveData(address asset)\n        external view returns (\n            uint256 unbacked,\n            uint256 accruedToTreasuryScaled,\n            uint256 totalAToken,\n            uint256 totalStableDebt,\n            uint256 totalVariableDebt,\n            uint256 liquidityRate,\n            uint256 variableBorrowRate,\n            uint256 stableBorrowRate,\n            uint256 averageStableBorrowRate,\n            uint256 liquidityIndex,\n            uint256 variableBorrowIndex,\n            uint40 lastUpdateTimestamp\n        );\n}\n\ncontract StakingSystem is Ownable, ReentrancyGuard, Pausable {\n    using SafeERC20 for IERC20;\n    \n    // Token addresses\n    address public immutable USDT_TOKEN;\n    address public immutable LINK_TOKEN;\n    \n    // AAVE addresses\n    address public immutable AAVE_POOL_PROVIDER;\n    address public immutable AAVE_DATA_PROVIDER;\n    \n    address public aavePool;\n    address public aUsdtToken; // AAVE aUSDT token for yield tracking\n    address public aLinkToken; // AAVE aLINK token for yield tracking\n    \n    \n    // User staking info with precise yield tracking\n    struct UserInfo {\n        uint256 stakedAmount;           // Original USDT amount staked\n        uint256 aTokenBalance;          // aUSDT tokens received from AAVE\n        uint256 lastStakeTime;          // Last stake timestamp\n        uint256 totalRewardsClaimed;    // Total rewards claimed by user\n    }\n    \n    // User LINK staking info\n    struct UserLinkInfo {\n        uint256 stakedAmount;           // Original LINK amount staked\n        uint256 aTokenBalance;          // aLINK tokens received from AAVE\n        uint256 lastStakeTime;          // Last stake timestamp\n        uint256 totalRewardsClaimed;    // Total rewards claimed by user\n    }\n    \n    mapping(address => UserInfo) public userInfo;\n    mapping(address => UserLinkInfo) public userLinkInfo;\n    \n    // System statistics\n    uint256 public totalStaked;\n    uint256 public totalRewardsPaid;\n    uint256 public totalLinkStaked;\n    uint256 public totalLinkRewardsPaid;\n    \n    // Events\n    event Staked(address indexed user, uint256 usdtAmount, uint256 aTokenAmount);\n    event Withdrawn(address indexed user, uint256 usdtAmount, uint256 aTokenBurned);\n    event RewardsClaimed(address indexed user, uint256 rewardAmount);\n    \n    event LinkStaked(address indexed user, uint256 linkAmount, uint256 aTokenAmount);\n    event LinkWithdrawn(address indexed user, uint256 linkAmount, uint256 aTokenBurned);\n    event LinkRewardsClaimed(address indexed user, uint256 rewardAmount);\n    \n    modifier validAmount(uint256 amount) {\n        require(amount > 0, \"Amount must be greater than 0\");\n        _;\n    }\n    \n    constructor(\n        address _usdtToken,\n        address _linkToken,\n        address _aavePoolProvider,\n        address _aaveDataProvider,\n        address _initialOwner\n    ) Ownable(_initialOwner) {\n        require(_usdtToken != address(0), \"Invalid USDT token address\");\n        require(_linkToken != address(0), \"Invalid LINK token address\");\n        require(_aavePoolProvider != address(0), \"Invalid AAVE pool provider address\");\n        require(_aaveDataProvider != address(0), \"Invalid AAVE data provider address\");\n        \n        USDT_TOKEN = _usdtToken;\n        LINK_TOKEN = _linkToken;\n        AAVE_POOL_PROVIDER = _aavePoolProvider;\n        AAVE_DATA_PROVIDER = _aaveDataProvider;\n        \n        // Get AAVE pool and aToken addresses\n        aavePool = IPoolAddressesProvider(_aavePoolProvider).getPool();\n        (aUsdtToken,,) = IPoolDataProvider(_aaveDataProvider).getReserveTokensAddresses(_usdtToken);\n        (aLinkToken,,) = IPoolDataProvider(_aaveDataProvider).getReserveTokensAddresses(_linkToken);\n        \n        // Approve tokens for AAVE\n        IERC20(_usdtToken).forceApprove(aavePool, type(uint256).max);\n        IERC20(_linkToken).forceApprove(aavePool, type(uint256).max);\n    }\n    \n    /**\n     * @dev Stake USDT directly into AAVE\n     * @param usdtAmount Amount of USDT to stake\n     */\n    function stake(uint256 usdtAmount) \n        external \n        nonReentrant \n        whenNotPaused \n        validAmount(usdtAmount) \n    {\n        // Transfer USDT from user\n        IERC20(USDT_TOKEN).safeTransferFrom(msg.sender, address(this), usdtAmount);\n        \n        // Supply USDT to AAVE and get aTokens\n        uint256 aTokenBalanceBefore = IAToken(aUsdtToken).balanceOf(address(this));\n        IPool(aavePool).supply(USDT_TOKEN, usdtAmount, address(this), 0);\n        uint256 aTokenBalanceAfter = IAToken(aUsdtToken).balanceOf(address(this));\n        uint256 aTokensReceived = aTokenBalanceAfter - aTokenBalanceBefore;\n        \n        // Update user info\n        UserInfo storage user = userInfo[msg.sender];\n        user.stakedAmount += usdtAmount;\n        user.aTokenBalance += aTokensReceived;\n        user.lastStakeTime = block.timestamp;\n        \n        // Update system stats\n        totalStaked += usdtAmount;\n        \n        emit Staked(msg.sender, usdtAmount, aTokensReceived);\n    }\n    \n    /**\n     * @dev Stake LINK directly into AAVE\n     * @param linkAmount Amount of LINK to stake\n     */\n    function stakeLINK(uint256 linkAmount) \n        external \n        nonReentrant \n        whenNotPaused \n        validAmount(linkAmount) \n    {\n        // Transfer LINK from user\n        IERC20(LINK_TOKEN).safeTransferFrom(msg.sender, address(this), linkAmount);\n        \n        // Supply LINK to AAVE and get aTokens\n        uint256 aTokenBalanceBefore = IAToken(aLinkToken).balanceOf(address(this));\n        IPool(aavePool).supply(LINK_TOKEN, linkAmount, address(this), 0);\n        uint256 aTokenBalanceAfter = IAToken(aLinkToken).balanceOf(address(this));\n        uint256 aTokensReceived = aTokenBalanceAfter - aTokenBalanceBefore;\n        \n        // Update user info\n        UserLinkInfo storage user = userLinkInfo[msg.sender];\n        user.stakedAmount += linkAmount;\n        user.aTokenBalance += aTokensReceived;\n        user.lastStakeTime = block.timestamp;\n        \n        // Update system stats\n        totalLinkStaked += linkAmount;\n        \n        emit LinkStaked(msg.sender, linkAmount, aTokensReceived);\n    }\n    \n    /**\n     * @dev Withdraw staked USDT from AAVE\n     * @param usdtAmount Amount of USDT to withdraw\n     */\n    function withdraw(uint256 usdtAmount) \n        external \n        nonReentrant \n        validAmount(usdtAmount)\n    {\n        UserInfo storage user = userInfo[msg.sender];\n        require(user.stakedAmount >= usdtAmount, \"Insufficient staked amount\");\n        \n        // Calculate proportional aToken amount to burn\n        uint256 aTokensToBurn = (user.aTokenBalance * usdtAmount) / user.stakedAmount;\n        \n        // Withdraw from AAVE (burns aTokens)\n        uint256 withdrawnAmount = IPool(aavePool).withdraw(\n            USDT_TOKEN, \n            aTokensToBurn, \n            address(this)\n        );\n        \n        // Update user info\n        user.stakedAmount -= usdtAmount;\n        user.aTokenBalance -= aTokensToBurn;\n        totalStaked -= usdtAmount;\n        \n        // Transfer USDT to user\n        IERC20(USDT_TOKEN).safeTransfer(msg.sender, withdrawnAmount);\n        \n        emit Withdrawn(msg.sender, withdrawnAmount, aTokensToBurn);\n    }\n    \n    /**\n     * @dev Withdraw staked LINK from AAVE\n     * @param linkAmount Amount of LINK to withdraw\n     */\n    function withdrawLINK(uint256 linkAmount) \n        external \n        nonReentrant \n        validAmount(linkAmount)\n    {\n        UserLinkInfo storage user = userLinkInfo[msg.sender];\n        require(user.stakedAmount >= linkAmount, \"Insufficient staked amount\");\n        \n        // Calculate proportional aToken amount to burn\n        uint256 aTokensToBurn = (user.aTokenBalance * linkAmount) / user.stakedAmount;\n        \n        // Withdraw from AAVE (burns aTokens)\n        uint256 withdrawnAmount = IPool(aavePool).withdraw(\n            LINK_TOKEN, \n            aTokensToBurn, \n            address(this)\n        );\n        \n        // Update user info\n        user.stakedAmount -= linkAmount;\n        user.aTokenBalance -= aTokensToBurn;\n        totalLinkStaked -= linkAmount;\n        \n        // Transfer LINK to user\n        IERC20(LINK_TOKEN).safeTransfer(msg.sender, withdrawnAmount);\n        \n        emit LinkWithdrawn(msg.sender, withdrawnAmount, aTokensToBurn);\n    }\n    \n    /**\n     * @dev Claim AAVE rewards - withdraw earned USDT from AAVE\n     */\n    function claimRewards() external nonReentrant {\n        UserInfo storage user = userInfo[msg.sender];\n        require(user.aTokenBalance > 0, \"No staked amount\");\n        \n        // Calculate user's unclaimed rewards based on aToken balance growth\n        uint256 userRewards = _calculateUserRewards(msg.sender);\n        require(userRewards > 0, \"No rewards available\");\n        \n        // Withdraw rewards from AAVE (proportional to user's rewards)\n        uint256 withdrawnAmount = IPool(aavePool).withdraw(\n            USDT_TOKEN,\n            userRewards,\n            address(this)\n        );\n        \n        // Update user's reward tracking\n        user.totalRewardsClaimed += withdrawnAmount;\n        totalRewardsPaid += withdrawnAmount;\n        \n        // Transfer rewards to user\n        IERC20(USDT_TOKEN).safeTransfer(msg.sender, withdrawnAmount);\n        \n        emit RewardsClaimed(msg.sender, withdrawnAmount);\n    }\n    \n    /**\n     * @dev Claim AAVE rewards for LINK - withdraw earned LINK from AAVE\n     */\n    function claimLinkRewards() external nonReentrant {\n        UserLinkInfo storage user = userLinkInfo[msg.sender];\n        require(user.aTokenBalance > 0, \"No staked amount\");\n        \n        // Calculate user's unclaimed rewards based on aToken balance growth\n        uint256 userRewards = _calculateUserLinkRewards(msg.sender);\n        require(userRewards > 0, \"No rewards available\");\n        \n        // Withdraw rewards from AAVE (proportional to user's rewards)\n        uint256 withdrawnAmount = IPool(aavePool).withdraw(\n            LINK_TOKEN,\n            userRewards,\n            address(this)\n        );\n        \n        // Update user's reward tracking\n        user.totalRewardsClaimed += withdrawnAmount;\n        totalLinkRewardsPaid += withdrawnAmount;\n        \n        // Transfer rewards to user\n        IERC20(LINK_TOKEN).safeTransfer(msg.sender, withdrawnAmount);\n        \n        emit LinkRewardsClaimed(msg.sender, withdrawnAmount);\n    }\n    \n    /**\n     * @dev Calculate user's unclaimed rewards based on aToken balance growth\n     */\n    function _calculateUserRewards(address userAddr) internal view returns (uint256) {\n        UserInfo storage user = userInfo[userAddr];\n        if (user.aTokenBalance == 0 || user.stakedAmount == 0) return 0;\n        \n        // Current value of user's aTokens in USDT terms\n        uint256 currentATokenValue = user.aTokenBalance;\n        \n        // Basic rewards = current aToken value - original staked amount - already claimed rewards\n        if (currentATokenValue > user.stakedAmount + user.totalRewardsClaimed) {\n            return currentATokenValue - user.stakedAmount - user.totalRewardsClaimed;\n        }\n        \n        return 0;\n    }\n    \n    /**\n     * @dev Calculate user's unclaimed LINK rewards based on aToken balance growth\n     */\n    function _calculateUserLinkRewards(address userAddr) internal view returns (uint256) {\n        UserLinkInfo storage user = userLinkInfo[userAddr];\n        if (user.aTokenBalance == 0 || user.stakedAmount == 0) return 0;\n        \n        // Current value of user's aTokens in LINK terms\n        uint256 currentATokenValue = user.aTokenBalance;\n        \n        // Basic rewards = current aToken value - original staked amount - already claimed rewards\n        if (currentATokenValue > user.stakedAmount + user.totalRewardsClaimed) {\n            return currentATokenValue - user.stakedAmount - user.totalRewardsClaimed;\n        }\n        \n        return 0;\n    }\n    \n    /**\n     * @dev Get user's staking information\n     */\n    function getUserInfo(address user) external view returns (\n        uint256 stakedAmount,\n        uint256 aTokenBalance,\n        uint256 lastStakeTime,\n        uint256 totalRewardsClaimed,\n        uint256 availableRewards,\n        uint256 currentValue\n    ) {\n        UserInfo memory info = userInfo[user];\n        uint256 available = _calculateUserRewards(user);\n        \n        // Calculate current value of user's position (aToken balance represents current value)\n        uint256 currentVal = info.aTokenBalance;\n        \n        return (\n            info.stakedAmount,\n            info.aTokenBalance,\n            info.lastStakeTime,\n            info.totalRewardsClaimed,\n            available,\n            currentVal\n        );\n    }\n    \n    /**\n     * @dev Get user's LINK staking information\n     */\n    function getUserLinkInfo(address user) external view returns (\n        uint256 stakedAmount,\n        uint256 aTokenBalance,\n        uint256 lastStakeTime,\n        uint256 totalRewardsClaimed,\n        uint256 availableRewards,\n        uint256 currentValue\n    ) {\n        UserLinkInfo memory info = userLinkInfo[user];\n        uint256 available = _calculateUserLinkRewards(user);\n        \n        // Calculate current value of user's position (aToken balance represents current value)\n        uint256 currentVal = info.aTokenBalance;\n        \n        return (\n            info.stakedAmount,\n            info.aTokenBalance,\n            info.lastStakeTime,\n            info.totalRewardsClaimed,\n            available,\n            currentVal\n        );\n    }\n    \n    /**\n     * @dev Get system statistics with AAVE data\n     */\n    function getSystemStats() external view returns (\n        uint256 _totalStaked,\n        uint256 _totalRewardsPaid,\n        uint256 _totalATokens,\n        uint256 _availableRewards,\n        uint256 _currentAPY\n    ) {\n        uint256 totalATokens = IAToken(aUsdtToken).balanceOf(address(this));\n        uint256 availableRewards = totalATokens > totalStaked ? totalATokens - totalStaked : 0;\n        \n        // Calculate approximate APY based on AAVE reserve data\n        (, , , , , uint256 liquidityRate, , , , , ,) = \n            IPoolDataProvider(AAVE_DATA_PROVIDER).getReserveData(USDT_TOKEN);\n        uint256 currentAPY = liquidityRate / 1e23; // Convert from ray to percentage\n        \n        return (\n            totalStaked, \n            totalRewardsPaid, \n            totalATokens, \n            availableRewards,\n            currentAPY\n        );\n    }\n    \n    /**\n     * @dev Get LINK system statistics with AAVE data\n     */\n    function getLinkSystemStats() external view returns (\n        uint256 _totalLinkStaked,\n        uint256 _totalLinkRewardsPaid,\n        uint256 _totalLinkATokens,\n        uint256 _availableLinkRewards,\n        uint256 _currentLinkAPY\n    ) {\n        uint256 totalATokens = IAToken(aLinkToken).balanceOf(address(this));\n        uint256 availableRewards = totalATokens > totalLinkStaked ? totalATokens - totalLinkStaked : 0;\n        \n        // Calculate approximate APY based on AAVE reserve data\n        (, , , , , uint256 liquidityRate, , , , , ,) = \n            IPoolDataProvider(AAVE_DATA_PROVIDER).getReserveData(LINK_TOKEN);\n        uint256 currentAPY = liquidityRate / 1e23; // Convert from ray to percentage\n        \n        return (\n            totalLinkStaked, \n            totalLinkRewardsPaid, \n            totalATokens, \n            availableRewards,\n            currentAPY\n        );\n    }\n    \n    // Admin functions\n    \n    function pause() external onlyOwner {\n        _pause();\n    }\n    \n    function unpause() external onlyOwner {\n        _unpause();\n    }\n    \n    // Emergency functions\n    function emergencyWithdraw(address token, uint256 amount) external onlyOwner {\n        if (token == address(0)) {\n            payable(owner()).transfer(amount);\n        } else {\n            IERC20(token).safeTransfer(owner(), amount);\n        }\n    }\n}"
      }
    }
  }
}